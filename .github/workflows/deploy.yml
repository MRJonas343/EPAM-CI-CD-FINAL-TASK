name: CI/CD Pipeline to ECR

on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: "0 2 * * *" # 2AM UTC daily

env:
  NAMESPACE:  epam-final-task
  CI_APP: bun-app
  AWS_REGION: us-east-1

jobs:
  build-test-push:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for semantic-release

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name : Lint code
        run: bun lint

      - name: Run tests
        run: bun test

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: main
          extra_plugins: |
            @semantic-release/git
            @semantic-release/github
            @semantic-release/changelog

      - name: Build app
        run: bun run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.REGISTRY }}

      - name: Docker build, tag and push image to ECR
        env:
          VERSION: ${{ steps.semantic-release.outputs.new_release_version }}
        run: |
          IMAGE_LATEST="${{ secrets.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.CI_APP }}:latest"
          IMAGE_VERSION="${{ secrets.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.CI_APP }}:${VERSION}"
          docker build -t "$IMAGE_LATEST" -t "$IMAGE_VERSION" .
          docker push "$IMAGE_LATEST"
          docker push "$IMAGE_VERSION"
